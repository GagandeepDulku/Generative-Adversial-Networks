import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

def plot_grids(train_images, generator_model, grid_rows = 4, grid_col = 4):

    """
    It plots two grids of real and generated images for monitoring purposes

    @args
      training_images = A big batch of images with shape [no_of_images, image_height, image_width, no_of_channel]
      grid_rows       = No of rows in the grid
      grid_col        = No of columns in the grid
    """

    random_images = np.random.randint(0, train_images.shape[0], grid_rows*grid_col).tolist()

  # Plotting real images
    fig = plt.figure(figsize = (grid_rows, grid_col))

    for i, img_i in enumerate(random_images):
        fig.add_subplot(grid_rows, grid_col, i+1)
        plt.imshow(train_images[img_i,:,:,:], cmap='gray')
        plt.axis('off')

    plt.suptitle("Real Images")
    plt.show()

   # Plotting generator outputed images
    plot_gen_images(generator_model, grid_rows)

def get_generator_image(generator, noise_vect = 100):

    """
    It generates an output from generator by using random vector

    @args
        generator = Trained generator model object
        noise_vect = Size of the noise vector

    @returns
        image output from the generator model
    """
    noise_vectors = tf.random.normal([1, noise_vect])
    return generator(noise_vectors)[0]

def plot_gen_images(generator_model, grid_size = 4, save_img = False, img_name = "Generated_digits.png"):

    """
    It plots a grid of images (sqaure-grid) generated by the generator model
    @args
      generator_model = Trained model of generator
      grid_size       = No of rows and column of the grid  

    """

    fig = plt.figure(figsize = (grid_size, grid_size))

    for i in range(grid_size**2):
        fig.add_subplot(grid_size, grid_size, i+1)
        plt.imshow(get_generator_image(generator_model), cmap = 'gray')
        plt.axis('off')

    plt.suptitle("Generated Images")
    plt.show()
    if save_img:
        fig.savefig(img_name)

def plot_loss(gen_loss, disc_loss):

    """
    It plots the generator and discrminator loss
    @args
        gen_loss  = list containing generators batch mean loss from each epoch
        disc_loss = list conating discriminator batch mean loss from each epoch 
    """

    fig, ax = plt.subplots()

    ax.plot(gen_loss, label="Gen Loss")
    ax.plot(disc_loss, label="Disc Loss")

    ax.legend()

    plt.title("Generator Loss = "+str(gen_loss[-1])+", Discriminator Loss = "+str(disc_loss[-1]))
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.show()

def create_training_directory(path):

    """
    Creates a directory of name (existing folder + 1) at given path
    @args
        path = complete path to the location where directory needs to be created

    @returns
        new_path = complete path to the newly created directory
    """                        
    path = os.path.join(path, 'training_data')
    dir_name = str(len(os.listdir(path))+1)
    new_path = os.path.join(path,dir_name)
    os.mkdir(new_path)
    return new_path